Index: ../../GitHub/BuildCraft/common/buildcraft/factory/TileAutoWorkbench.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../../GitHub/BuildCraft/common/buildcraft/factory/TileAutoWorkbench.java	(revision )
+++ ../../GitHub/BuildCraft/common/buildcraft/factory/TileAutoWorkbench.java	(revision )
@@ -24,11 +24,15 @@
 import net.minecraftforge.event.entity.player.PlayerDestroyItemEvent;
 import buildcraft.api.core.Position;
 import buildcraft.api.inventory.ISpecialInventory;
-import buildcraft.core.inventory.TransactorRoundRobin;
+import buildcraft.core.inventory.TransactorDefault;
 import buildcraft.core.proxy.CoreProxy;
 import buildcraft.core.utils.Utils;
+import net.minecraftforge.inventory.ICustomInventory;
+import net.minecraftforge.inventory.IDynamicInventory;
+import net.minecraftforge.inventory.IInventoryHandler;
+import net.minecraftforge.inventory.RoundRobinInventoryHandler;
 
-public class TileAutoWorkbench extends TileEntity implements ISpecialInventory {
+public class TileAutoWorkbench extends TileEntity implements ISpecialInventory, ICustomInventory {
 
 	private ItemStack stackList[] = new ItemStack[9];
 
@@ -259,6 +263,8 @@
 			// Don't get stuff out of ISpecialInventory for now / we wouldn't
 			// know how to put it back... And it's not clear if we want to
 			// have workbenches automatically getting things from one another.
+		} else if (tile instanceof IDynamicInventory || tile instanceof ICustomInventory) {
+			// Same case as above. It could get a little weird.
 		} else if (tile instanceof IInventory) {
 			IInventory inventory = Utils.getInventory((IInventory) tile);
 
@@ -371,12 +377,18 @@
 	/* ISPECIALINVENTORY */
 	@Override
 	public int addItem(ItemStack stack, boolean doAdd, ForgeDirection from) {
-		return new TransactorRoundRobin(this).add(stack, from, doAdd).stackSize;
+		return new TransactorDefault(this).add(stack, from, doAdd).stackSize;
 	}
 
 	@Override
 	public ItemStack[] extractItem(boolean doRemove, ForgeDirection from, int maxItemCount) {
 		return new ItemStack[] { extractItem(doRemove, false) };
+	}
+
+	// ICustomInventory
+	@Override
+	public IInventoryHandler getInventoryHandler() {
+		return new RoundRobinInventoryHandler();
 	}
 
 }
