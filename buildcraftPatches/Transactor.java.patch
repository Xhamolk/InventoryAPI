Index: ../../GitHub/BuildCraft/common/buildcraft/transport/pipes/PipeItemsEmerald.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../../GitHub/BuildCraft/common/buildcraft/transport/pipes/PipeItemsEmerald.java	(revision 8dfa54d930ccc587058900d2a1478be253e07efa)
+++ ../../GitHub/BuildCraft/common/buildcraft/transport/pipes/PipeItemsEmerald.java	(revision )
@@ -30,6 +30,8 @@
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.nbt.NBTBase;
 import net.minecraft.nbt.NBTTagCompound;
+import net.minecraftforge.inventory.IInventoryHandler;
+import net.minecraftforge.inventory.InventoryUtils;
 
 public class PipeItemsEmerald extends PipeItemsWood implements IInventory, ISpecialInventory, IClientState {
 
@@ -164,6 +166,7 @@
 
 	@Override
 	public ItemStack checkExtractGeneric(IInventory inventory, boolean doRemove, ForgeDirection from, int start, int stop) {
+		IInventoryHandler handler = InventoryUtils.getInventoryHandler(inventory);
 		for (int i = start; i <= stop; ++i) {
 			ItemStack stack = inventory.getStackInSlot(i);
 			if (stack != null && stack.stackSize > 0) {
@@ -171,12 +174,14 @@
 				if (filter == null) {
 					return null;
 				}
-				if (!filter.isItemEqual(stack)) {
+				int count = handler.getItemCountInSlot(inventory, i, filter);
+				if (count <= 0) {
 					continue;
 				}
 				if (doRemove) {
 					incrementFilter();
-					return inventory.decrStackSize(i, (int) getPowerProvider().useEnergy(1, stack.stackSize, true));
+					getPowerProvider().useEnergy(1, stack.stackSize, true);
+					return handler.takeItemFromInventorySlot(inventory, i);
 				} else {
 					return stack;
 				}
Index: ../../GitHub/BuildCraft/common/buildcraft/core/inventory/TransactorDefault.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../../GitHub/BuildCraft/common/buildcraft/core/inventory/TransactorDefault.java	(revision )
+++ ../../GitHub/BuildCraft/common/buildcraft/core/inventory/TransactorDefault.java	(revision )
@@ -0,0 +1,34 @@
+package buildcraft.core.inventory;
+
+import net.minecraft.inventory.IInventory;
+import net.minecraft.item.ItemStack;
+import net.minecraftforge.common.ForgeDirection;
+import net.minecraftforge.inventory.InventoryHelper;
+import net.minecraftforge.inventory.InventoryUtils;
+
+// A Transactor according to the InventoryAPI standards.
+public class TransactorDefault extends Transactor {
+
+	protected IInventory inventory;
+	protected InventoryHelper helper;
+
+	public TransactorDefault(IInventory inventory) {
+		this.inventory = inventory;
+		this.helper = InventoryUtils.getInventoryHelper( inventory );
+	}
+
+	@Override
+	public int inject(ItemStack stack, ForgeDirection orientation, boolean doAdd) {
+		helper.setSide( orientation );
+
+		if( !helper.canPlaceItemOnInventory( stack, false ) )
+			return 0;
+
+		if( doAdd ) {
+			return helper.addItemToInventory( stack );
+		} else {
+			return Math.min( helper.getSpaceForItem( stack ), stack.stackSize );
+		}
+	}
+
+}
Index: ../../GitHub/BuildCraft/common/buildcraft/factory/TileAutoWorkbench.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../../GitHub/BuildCraft/common/buildcraft/factory/TileAutoWorkbench.java	(revision 8dfa54d930ccc587058900d2a1478be253e07efa)
+++ ../../GitHub/BuildCraft/common/buildcraft/factory/TileAutoWorkbench.java	(revision )
@@ -24,11 +24,15 @@
 import net.minecraftforge.event.entity.player.PlayerDestroyItemEvent;
 import buildcraft.api.core.Position;
 import buildcraft.api.inventory.ISpecialInventory;
-import buildcraft.core.inventory.TransactorRoundRobin;
+import buildcraft.core.inventory.TransactorDefault;
 import buildcraft.core.proxy.CoreProxy;
 import buildcraft.core.utils.Utils;
+import net.minecraftforge.inventory.ICustomInventory;
+import net.minecraftforge.inventory.IDynamicInventory;
+import net.minecraftforge.inventory.IInventoryHandler;
+import net.minecraftforge.inventory.RoundRobinInventoryHandler;
 
-public class TileAutoWorkbench extends TileEntity implements ISpecialInventory {
+public class TileAutoWorkbench extends TileEntity implements ISpecialInventory, ICustomInventory {
 
 	private ItemStack stackList[] = new ItemStack[9];
 
@@ -259,6 +263,8 @@
 			// Don't get stuff out of ISpecialInventory for now / we wouldn't
 			// know how to put it back... And it's not clear if we want to
 			// have workbenches automatically getting things from one another.
+		} else if (tile instanceof IDynamicInventory || tile instanceof ICustomInventory) {
+			// Same case as above. It could get a weird.
 		} else if (tile instanceof IInventory) {
 			IInventory inventory = Utils.getInventory((IInventory) tile);
 
@@ -371,12 +377,18 @@
 	/* ISPECIALINVENTORY */
 	@Override
 	public int addItem(ItemStack stack, boolean doAdd, ForgeDirection from) {
-		return new TransactorRoundRobin(this).add(stack, from, doAdd).stackSize;
+		return new TransactorDefault(this).add(stack, from, doAdd).stackSize;
 	}
 
 	@Override
 	public ItemStack[] extractItem(boolean doRemove, ForgeDirection from, int maxItemCount) {
 		return new ItemStack[] { extractItem(doRemove, false) };
+	}
+
+	// ICustomInventory
+	@Override
+	public IInventoryHandler getInventoryHandler() {
+		return new RoundRobinInventoryHandler();
 	}
 
 }
Index: ../../GitHub/BuildCraft/common/buildcraft/transport/pipes/PipeItemsWood.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../../GitHub/BuildCraft/common/buildcraft/transport/pipes/PipeItemsWood.java	(revision 8dfa54d930ccc587058900d2a1478be253e07efa)
+++ ../../GitHub/BuildCraft/common/buildcraft/transport/pipes/PipeItemsWood.java	(revision )
@@ -27,6 +27,8 @@
 import buildcraft.core.utils.Utils;
 import buildcraft.transport.Pipe;
 import buildcraft.transport.PipeTransportItems;
+import net.minecraftforge.inventory.IInventoryHandler;
+import net.minecraftforge.inventory.InventoryUtils;
 
 public class PipeItemsWood extends Pipe implements IPowerReceptor {
 
@@ -208,14 +210,15 @@
 	}
 
 	public ItemStack checkExtractGeneric(IInventory inventory, boolean doRemove, ForgeDirection from, int start, int stop) {
+		IInventoryHandler handler = InventoryUtils.getInventoryHandler(inventory);
 		for (int k = start; k <= stop; ++k) {
-			ItemStack slot = inventory.getStackInSlot(k);
-
-			if (slot != null && slot.stackSize > 0) {
+			int count = handler.getItemCountInSlot(inventory, k);
+			if (count > 0) {
 				if (doRemove) {
-					return inventory.decrStackSize(k, (int) powerProvider.useEnergy(1, slot.stackSize, true));
+					powerProvider.useEnergy(1, count, true);
+					return handler.takeItemFromInventory(inventory, from);
 				} else {
-					return slot;
+					return inventory.getStackInSlot(k);
 				}
 			}
 		}
Index: ../../GitHub/BuildCraft/common/buildcraft/core/inventory/Transactor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package buildcraft.core.inventory;\n\nimport net.minecraft.inventory.IInventory;\nimport net.minecraft.item.ItemStack;\nimport net.minecraft.tileentity.TileEntityFurnace;\nimport net.minecraftforge.common.ForgeDirection;\nimport net.minecraftforge.common.ISidedInventory;\nimport buildcraft.api.inventory.ISpecialInventory;\nimport buildcraft.core.utils.Utils;\n\npublic abstract class Transactor implements ITransactor {\n\n\t@Override\n\tpublic ItemStack add(ItemStack stack, ForgeDirection orientation, boolean doAdd) {\n\t\tItemStack added = stack.copy();\n\t\tadded.stackSize = inject(stack, orientation, doAdd);\n\t\treturn added;\n\t}\n\n\tpublic abstract int inject(ItemStack stack, ForgeDirection orientation, boolean doAdd);\n\n\tpublic static ITransactor getTransactorFor(Object object) {\n\n\t\tif (object instanceof ISpecialInventory)\n\t\t\treturn new TransactorSpecial((ISpecialInventory) object);\n\n\t\t// Furnaces need to be special cased to prevent vanilla XP exploits.\n\t\telse if (object instanceof TileEntityFurnace)\n\t\t\treturn new TransactorFurnace((ISidedInventory) object);\n\n\t\telse if (object instanceof ISidedInventory)\n\t\t\treturn new TransactorSided((ISidedInventory) object);\n\n\t\telse if (object instanceof IInventory)\n\t\t\treturn new TransactorSimple(Utils.getInventory((IInventory) object));\n\n\t\treturn null;\n\t}\n}\n
===================================================================
--- ../../GitHub/BuildCraft/common/buildcraft/core/inventory/Transactor.java	(revision 8dfa54d930ccc587058900d2a1478be253e07efa)
+++ ../../GitHub/BuildCraft/common/buildcraft/core/inventory/Transactor.java	(revision )
@@ -2,9 +2,7 @@
 
 import net.minecraft.inventory.IInventory;
 import net.minecraft.item.ItemStack;
-import net.minecraft.tileentity.TileEntityFurnace;
 import net.minecraftforge.common.ForgeDirection;
-import net.minecraftforge.common.ISidedInventory;
 import buildcraft.api.inventory.ISpecialInventory;
 import buildcraft.core.utils.Utils;
 
@@ -24,15 +22,8 @@
 		if (object instanceof ISpecialInventory)
 			return new TransactorSpecial((ISpecialInventory) object);
 
-		// Furnaces need to be special cased to prevent vanilla XP exploits.
-		else if (object instanceof TileEntityFurnace)
-			return new TransactorFurnace((ISidedInventory) object);
-
-		else if (object instanceof ISidedInventory)
-			return new TransactorSided((ISidedInventory) object);
-
 		else if (object instanceof IInventory)
-			return new TransactorSimple(Utils.getInventory((IInventory) object));
+			return new TransactorDefault( Utils.getInventory( (IInventory) object ) ) ;
 
 		return null;
 	}
